chmod +x _______.py <----- file name 
./______.py  <-- run file name
gedit ./_______ .py <--- file name

<--------> Make an string, and remove the numbers from it <---------

def kill(strng):
	a = []  #make a new list, empty 
	
	for x in strng:  ##or x iterating through the input parameter 
		if x.isalpha():  ##.isalpha() a member function for the string type class condition 
			a.append(x)  ###.append adds an element into a list 
		
	return ''.join(a)    ##'' makes an empty string 
		

if __name__ == '__main__':
	st = input('enter a alpha numeric string ')
	val = kill(st)
	print(val)
  
  
 <---------- STEGANOGRAPHY ------------>
  
  def steg_encode_char(char, cover):
    '''LSB encodes a character
    Args:
        char (str): a single character string
        cover (list): list of 8 strings representing integers in the range [0-255]
    Returns:
        None
    '''
    msgbin = format(ord(char),'0>8b')  ##converting into a binary   
    for x in range(0,8):
        y = list(format(int(cover[x]),'0>8b'))
        y[-1] = msgbin[x]
        cover[x] = int(''.join(y),2)
        


def steg_decode_char(stego):
    '''LSB decodes a character
    Args:
        stego (list): list of 8 strings representing integers in the range [0-255]
    Returns:
        str: character that was decoded
    '''
    msgbits = []
    for b in stego:
        msgbits.append(bin(b)[-1])
    return chr(int(''.join(msgbits),2))
        


if __name__ == '__main__':
	char = 'a'
	cover = ['250','251','252','251','250','249','248','249']
	steg_encode_char('a',cover)
	print(cover)
	a = steg_decode_char(cover)
	print(a)

  
  
 <---- COUNTER PROBLEM <-------- 
  def points(games):
    counter = 0
    
    for g in games:
        x = g.split(':')[0]
        y = g.split(':')[1]
        
        if x > y:
            counter += 3
        elif x < y:
            counter += 0
        else: 
            counter += 1
    return counter


<----- FINAL GRADE PROBLEM <-----

def final_grade(exam, projects):
    
    if (exam >= 90) or (projects > 10):
        return 100
    elif (exam > 75) and (projects >= 5):
        return 90
    elif (exam >= 50) and (projects >= 2):
        return 75
    else:
        return 0
	
	
<----- INITALS OUT OF A NAME <-----
def abbrevName(name):
    a = name.split()
    b = a[0][0]
    c = a[1][0]
    string = '{}.{}'.format(b.upper(),c.upper())  ###makes it upper case 
    
    print(string)
    return string
    
    
<------ DNA to RNA <-------------------

def DNAtoRNA(dna):
    rna = []
    for x in dna:
        if x == 'T':
            rna.append('U')
        else:
            rna.append(x)
    return ''.join(rna)
    
    
    # create a function which returns an RNA sequence from the given DNA sequence
    
 <----- COUNT SHEEP -------------->
 
 def count_sheep(n):
    a = []
    for x in range(1,n+1):
        a.append('{} sheep...'.format(x))
            
    return ''.join(a)
        
